use slug::slugify;

pub fn transform(line: &str, transformation: &str) -> Option<String> {
    match transformation {
        // Compulsory transformations
        "lowercase" => Some(line.to_lowercase()),
        "uppercase" => Some(line.to_uppercase()),
        "no-spaces" => Some(line.replace(" ", "")),
        "slugify" => Some(slugify(&line)),
        // Bonus transofrmations
        "double" => Some(format!("{}{}", line, line)),
        "reverse" => Some(line.chars().rev().collect()),
        _ => None, // Default case for any other value
    }
}

// Add unit tests generated by ChatGPT
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_lowercase() {
        assert_eq!(
            transform("Hello, World!", "lowercase"),
            Some("hello, world!".to_string())
        );
    }

    #[test]
    fn test_uppercase() {
        assert_eq!(
            transform("Hello, World!", "uppercase"),
            Some("HELLO, WORLD!".to_string())
        );
    }

    #[test]
    fn test_no_spaces() {
        assert_eq!(
            transform("Hello, World!", "no-spaces"),
            Some("Hello,World!".to_string())
        );
    }

    #[test]
    fn test_slugify() {
        assert_eq!(
            transform("Hello, World!", "slugify"),
            Some("hello-world".to_string())
        );
    }

    #[test]
    fn test_double() {
        assert_eq!(
            transform("Hello, World!", "double"),
            Some("Hello, World!Hello, World!".to_string())
        );
    }

    #[test]
    fn test_reverse() {
        assert_eq!(
            transform("Hello, World!", "reverse"),
            Some("!dlroW ,olleH".to_string())
        );
    }

    #[test]
    fn test_unknown_argument() {
        assert_eq!(transform("Hello, World!", "unknown"), None);
    }
}

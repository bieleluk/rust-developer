use slug::slugify;
use std::error::Error;
use std::io::stdin;

pub fn collect_and_transform(transformation: &str) -> Result<String, Box<dyn Error>> {
    // Read a string from stdin
    let mut line = String::new();
    stdin().read_line(&mut line)?;
    let line = line.trim();
    println!("Original: {line}");

    transform(line, transformation)
}

pub fn transform(line: &str, transformation: &str) -> Result<String, Box<dyn Error>> {
    match transformation {
        // Compulsory transformations
        "lowercase" => Ok(line.to_lowercase()),
        "uppercase" => Ok(line.to_uppercase()),
        "no-spaces" => Ok(line.replace(" ", "")),
        "slugify" => Ok(slugify(&line)),
        // Bonus transofrmations
        "double" => Ok(format!("{}{}", line, line)),
        "reverse" => Ok(line.chars().rev().collect()),
        _ => Err(From::from("Non-existing transformation")), // Default case for any other value
    }
}

// Add unit tests generated by ChatGPT
// #[cfg(test)]
// mod tests {
//     use super::*;

//     #[test]
//     fn test_lowercase() {
//         assert_eq!(
//             transform("Hello, World!", "lowercase"),
//             Ok("hello, world!".to_string())
//         );
//     }

//     #[test]
//     fn test_uppercase() {
//         assert_eq!(
//             transform("Hello, World!", "uppercase"),
//             Ok("HELLO, WORLD!".to_string())
//         );
//     }

//     #[test]
//     fn test_no_spaces() {
//         assert_eq!(
//             transform("Hello, World!", "no-spaces"),
//             Ok("Hello,World!".to_string())
//         );
//     }

//     #[test]
//     fn test_slugify() {
//         assert_eq!(
//             transform("Hello, World!", "slugify"),
//             Ok("hello-world".to_string())
//         );
//     }

//     #[test]
//     fn test_double() {
//         assert_eq!(
//             transform("Hello, World!", "double"),
//             Ok("Hello, World!Hello, World!".to_string())
//         );
//     }

//     #[test]
//     fn test_reverse() {
//         assert_eq!(
//             transform("Hello, World!", "reverse"),
//             Ok("!dlroW ,olleH".to_string())
//         );
//     }

//     #[test]
//     fn test_unknown_argument() {
//         assert_eq!(transform("Hello, World!", "unknown"), None);
//     }
// }
